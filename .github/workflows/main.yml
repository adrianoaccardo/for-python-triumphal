name: Suno-Quantum-Ultra-Resilient-Guarded-MCP

on:
  push:
    branches: [ "main", "suno-mvp" ]
  pull_request:
    branches: [ "main", "suno-mvp" ]
  workflow_dispatch:

concurrency:
  group: suno-quantum-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_DEFAULT: "3.11"
  ALT_PYTHON: "3.10"
  APP_PORT: "7860"
  TTS_SAMPLE_TEXT: "Ciao, questa è una prova TTS Silero su CPU."
  ARTIFACT_NAME: "suno-mini-mvp-artifacts"
  MAX_RETRIES: "5"

jobs:
  lint:
    name: Lint and static checks (guarded + MCP hints)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Print environment context
        run: |
          uname -a
          df -h || true
          free -h || true
          echo "Runner OS: ${{ runner.os }}"
          echo "Branch: ${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v4
      - name: Guard checkout (verify repo)
        if: always()
        run: |
          git rev-parse --is-inside-work-tree
          test -f README.md || echo "README missing (ok if not present)"

      - name: Setup Python (primary)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: "pip"
      - name: Guard python version
        if: always()
        run: |
          python -V
          which python
          python -c "import sys; print(sys.executable)"
      - name: Setup Python fallback
        if: failure()
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.ALT_PYTHON }}
          cache: "pip"
      - name: MCP hint (setup-python issues)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_SETUP_PYTHON.md << 'EOF'
          Problema setup-python: apri VS Code → Command Palette → "MCP: List Servers" e installa il server GitHub MCP.
          Poi chiedi: "Diagnostica azione actions/setup-python@v4 su runner Ubuntu. Propone fix e motivi."
          EOF

      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Guard pip
        if: always()
        run: python -m pip --version
      - name: MCP hint (pip upgrade issues)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_PIP.md << 'EOF'
          Fallimento upgrade pip: usa MCP con tool HTTP per verificare compatibilità wheels su runner e proporre mirror/--no-cache-dir.
          Prompt: "Perché pip fallisce su GitHub Actions (Ubuntu latest)? Genera comando di riparazione."
          EOF

      - name: Install lint deps
        run: pip install pylint black isort flake8
      - name: Guard lint deps
        if: always()
        run: |
          python -c "import pylint, black, isort; print('lint deps OK')"
      - name: MCP hint (lint deps issues)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_LINT.md << 'EOF'
          Dipendenze lint non installate: usa MCP per cercare versioni compatibili di pylint/black/isort con Python corrente.
          Prompt: "Trova versioni compatibili con Python ${{ env.PYTHON_DEFAULT }} e genera pin."
          EOF

      - name: Pylint
        run: pylint **/*.py || true
      - name: Black check
        run: black --check . || true
      - name: Isort check
        run: isort --check-only . || true
      - name: Flake8
        run: flake8 . || true
      - name: MCP hint (lint findings)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_LINT_FINDINGS.md << 'EOF'
          Lint falliti: usa MCP per applicare auto-fix consigliati (black/isort) e generare PR patch.
          Prompt: "Analizza output lint e proponi patch diff-ready."
          EOF

      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs
          path: .
          retention-days: 3

  unit-tests:
    name: Unit tests (guarded + MCP hints)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Preflight (disk/net)
        run: |
          df -h || true
          curl -s https://pypi.org/ || echo "PyPI reachable?"

      - name: Checkout
        uses: actions/checkout@v4
      - name: Guard checkout (test paths)
        if: always()
        run: |
          ls -la
          test -f requirements.txt || echo "requirements.txt missing"

      - name: Setup Python (primary)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: "pip"
      - name: Guard python
        if: always()
        run: python -c "import sys; print(sys.version)"

      - name: Setup Python fallback
        if: failure()
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.ALT_PYTHON }}
          cache: "pip"
      - name: MCP hint (matrix/fallback advice)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_MATRIX.md << 'EOF'
          Suggerisce matrix su 3.10/3.11 e pin dipendenze per compatibilità.
          Prompt: "Genera strategy.matrix python-version e pins coerenti."
          EOF

      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install deps
        run: pip install -r requirements.txt pytest || true
      - name: Recovery deps (no-cache)
        if: failure()
        run: |
          pip cache purge || true
          pip install --no-cache-dir -r requirements.txt pytest
      - name: MCP hint (deps resolver)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_DEPS.md << 'EOF'
          Chiedi a MCP di risolvere conflitti dipendenze e proporre pin stabili.
          Prompt: "Leggi requirements.txt, risolvi versioni e genera lock."
          EOF

      - name: Pytest normal
        run: pytest -q || true
      - name: Pytest stop-on-fail
        if: failure()
        run: pytest -q -x || true
      - name: MCP hint (test failures)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_TESTS.md << 'EOF'
          Fornisci log test a MCP e chiedi root cause + patch.
          Prompt: "Diagnostica failure pytest e genera diff patch."
          EOF

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: .
          retention-days: 3

  tts-smoke:
    name: TTS Silero smoke on CPU (guarded + MCP hints)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Guard repo files
        if: always()
        run: |
          ls -la
          python -c "print('Repo OK')"

      - name: Setup Python (primary)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: "pip"
      - name: Guard python env
        if: always()
        run: |
          python -V
          python -c "import site; print(site.getsitepackages())"

      - name: Setup Python fallback
        if: failure()
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.ALT_PYTHON }}
          cache: "pip"
      - name: MCP hint (torch wheels CPU)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_TORCH.md << 'EOF'
          Prompt: "Trova wheels CPU torch/torchaudio compatibili e genera comandi pip per Ubuntu-latest."
          EOF

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install TTS deps (CPU)
        run: pip install torch torchaudio soundfile numpy || true
      - name: Recover TTS deps (explicit CPU wheels)
        if: failure()
        run: |
          pip install --upgrade "torch==2.3.*" "torchaudio==2.3.*" --index-url https://download.pytorch.org/whl/cpu
          pip install soundfile numpy

      - name: Silero TTS (primary)
        run: |
          python - << 'PY'
          import torch, os, soundfile as sf
          text = os.environ.get("TTS_SAMPLE_TEXT")
          model = torch.hub.load('snakers4/silero-models', 'silero_tts', language='en', speaker='en_10')
          audio = model.apply_tts(text=text, speaker='en_10', sample_rate=48000)
          sf.write("tts_smoke.wav", audio, 48000)
          print("Saved tts_smoke.wav")
          PY
      - name: Silero TTS fallback (lower SR / other speaker)
        if: failure()
        run: |
          python - << 'PY'
          import torch, soundfile as sf
          model = torch.hub.load('snakers4/silero-models', 'silero_tts', language='en', speaker='en_0')
          audio = model.apply_tts(text="Fallback TTS on CPU", speaker='en_0', sample_rate=16000)
          sf.write("tts_fallback.wav", audio, 16000)
          print("Saved tts_fallback.wav")
          PY
      - name: MCP hint (silero usage)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_SILERO.md << 'EOF'
          Prompt: "Verifica API silero_tts (torch.hub), lista speakers disponibili e SR consigliati su CPU."
          EOF

      - name: Verify TTS artifacts
        if: always()
        run: |
          test -f tts_smoke.wav || echo "tts_smoke.wav missing (may have tts_fallback.wav)"
          test -f tts_fallback.wav || true
          du -h *.wav || true

      - name: Upload TTS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            tts_smoke.wav
            tts_fallback.wav
          retention-days: 7

  gradio-smoke:
    name: Gradio UI smoke with audio sample (guarded + MCP hints)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Kill zombies on port
        run: |
          pids=$(lsof -ti tcp:${APP_PORT} || true)
          [ -n "$pids" ] && kill -9 $pids || true

      - name: Checkout
        uses: actions/checkout@v4
      - name: Guard repo (app.py exists?)
        if: always()
        run: |
          test -f app.py || (echo "app.py missing"; exit 1)

      - name: Setup Python (primary)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: "pip"
      - name: Guard python
        if: always()
        run: python -V

      - name: Setup Python fallback
        if: failure()
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.ALT_PYTHON }}
          cache: "pip"
      - name: MCP hint (app deps)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_APP_DEPS.md << 'EOF'
          Prompt: "Leggi requirements.txt e suggerisci pin robusti per gradio/uvicorn su Python ${{ env.PYTHON_DEFAULT }}."
          EOF

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install app deps
        run: |
          pip install -r requirements.txt
          pip install gradio uvicorn || true
      - name: Recover deps (no-cache)
        if: failure()
        run: |
          pip cache purge || true
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir gradio uvicorn

      - name: Start app (primary) and probe GUI
        run: |
          nohup python app.py > app.log 2>&1 &
          for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
            sleep 5
            if curl -sI "http://localhost:${APP_PORT}" | head -n1 | grep -q "200"; then
              echo "GUI OK"
              exit 0
            fi
            echo "retry $i"
          done
          tail -n 200 app.log
          exit 1
      - name: Restart app and reinstall deps (fallback)
        if: failure()
        run: |
          pip install --upgrade -r requirements.txt gradio uvicorn
          nohup python app.py > app_retry.log 2>&1 &
          for i in $(seq 1 3); do
            sleep 5
            curl -sI "http://localhost:${APP_PORT}" && exit 0 || echo "retry $i"
          done
          tail -n 200 app_retry.log || true
      - name: MCP hint (GUI probe fails)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_GUI.md << 'EOF'
          Prompt: "Diagnostica GUI non raggiungibile su 7860. Leggi app.log e proponi fix (host binding, port, firewall)."
          EOF

      - name: Generate music sample (synthetic, CPU)
        run: |
          python - << 'PY'
          import numpy as np, soundfile as sf
          sr = 16000
          t = np.linspace(0, 2, 2*sr, endpoint=False)
          wave = 0.2*np.sin(2*np.pi*440*t)  # A4 tone
          sf.write("music_demo.wav", wave, sr)
          print("Saved music_demo.wav")
          PY
      - name: Guard music file
        if: always()
        run: |
          test -f music_demo.wav
          du -h music_demo.wav

      - name: Upload GUI logs and music
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-gui
          path: |
            app.log
            app_retry.log
            music_demo.wav
          retention-days: 7

  docker-build:
    name: Docker build (guarded + MCP hints)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Guard Dockerfile presence
        if: always()
        run: |
          test -f Dockerfile || (echo "Dockerfile missing"; exit 1)

      - name: Build image (primary)
        run: docker build . --file Dockerfile --tag suno-mini-mvp:$(date +%s)
      - name: Build image (fallback) no cache
        if: failure()
        run: docker build . --file Dockerfile --tag suno-mini-mvp:nocache --no-cache
      - name: MCP hint (docker build)
        if: failure()
        run: |
          mkdir -p .vscode
          cat > .vscode/MCP_HINT_DOCKER.md << 'EOF'
          Prompt: "Analizza Dockerfile e suggerisci fix (pin base image, apt mirrors, cache busting). Genera nuovo comando build."
          EOF

      - name: Verify image
        if: always()
        run: docker images | grep suno-mini-mvp || echo "Image not listed (check build logs)"

  bundle-artifacts:
    name: Bundle artifacts
    runs-on: ubuntu-latest
    needs: [tts-smoke, gradio-smoke]
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download TTS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifacts
      - name: Download GUI artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-gui
          path: ./artifacts

      - name: Verify artifacts
        if: always()
        run: |
          ls -la artifacts || true
          du -h artifacts/* || true

      - name: Tarball
        run: tar -czf suno-mini-mvp.tar.gz artifacts || true
      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: bundle
          path: suno-mini-mvp.tar.gz
          retention-days: 7
